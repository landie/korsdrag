@misc{falko07,
	author = "Menge, Falko",
	title = {{Enterprise Service Bus}},
	year = "2007",
	howpublished = "http://kanagwa.com/assets/21/Esb1.pdf"
}

@misc{fenner03,
	author = "Fenner, James",
	title = {{Enterprise Application Integration Techniques}},
	year = "2003",
	howpublished = "http://www.cs.ucl.ac.uk/staff/ucacwxe/lectures/3C05-02-03/aswe21-essay.pdf"
}

@misc{mehta11,
	author = "Mehta, Amar",
	title = {{11 Of Best Opensource ESB Tools}},
	year = "2011",
	howpublished = "http://www.toolsjournal.com/integrations-articles/item/224-11-of-best-opensource-esb-tools"
}

@misc{mulesoft08,
	title = {{Mule Performance Test Results}},
	year = "2008",
	howpublished = "http://www.mulesoft.com/downloads/Whitepaper\_perf\_test\_results.pdf"
}

@misc{Perera07,
	author = "Perera, Asankha",
	title = {{WSO2 ESB Performance Testing }},
	year = "2007",
	howpublished = "http://wso2.org/library/1721"
}

@misc{mulevsjboss,
	title = {{Understanding Integration From A "Needs-Based" Perspective - Mule vs. JBoss ESB}},
	year = "2010",
	howpublished = "http://www.mulesoft.org/comparing-mule-vs-jboss-esb"
}

@misc{mulevsglassfish,
	title = {{Understanding Integration From A "Needs-Based" Perspective - Mule vs. Open ESB / Glassfish ESB}},
	year = "2010",
	howpublished = "http://www.mulesoft.org/comparing-mule-vs-open-esb-glassfish-esb"
}

@misc{mulevsservicemix,
	title = {{Understanding Integration From A "Needs-Based" Perspective - Mule vs. ServiceMix / Fuse ESB}},
	year = "2010",
	howpublished = "http://www.mulesoft.org/comparing-mule-vs-servicemix-fuse-esb"
}

@misc{ESBthesis,
	author = "Sanjay P. Ahuja, Amit Patel",
	title = {{}},
	year = "2011",
	howpublished = "http://www.scirp.org/Journal/PaperInformation.aspx?paperID=6768"

}
%template for web references
%@misc{,
%	author = "",
%	title = {{}},
%	year = "",
%	howpublished = ""
%}

@ARTICLE{Madeyski2010,
	author = {Madeyski, L. and Radyk, N.},
	title = {{Judy - A Mutation Testing Tool for Java}},
	journal = {IET Software},
	year = {2010},
	volume = {4},
	pages = {32--42},
	number = {1},
	abstract = {Popular code coverage measures, such as branch coverage, are indicators
		of the thoroughness rather than the fault detection capability of
			test suites. Mutation testing is a fault-based technique that measures
			the effectiveness of test suites for fault localisation. Unfortunately,
		use of mutation testing in the software industry is rare because
			generating and running vast numbers of mutants against the test cases
			is time-consuming and difficult to do without an automated, fast
			and reliable tool. Our objective is to present an innovative approach
			to mutation testing that takes advantage of a novel aspect-oriented
			programming mechanism, called `pointcut and advice`, to avoid multiple
			compilation of mutants and, therefore, to speed up mutation testing.
			An empirical comparison of the performance of the developed tool,
		called <span class='snippet'>Judy</span>, with the MuJava mutation
			testing tool on 24 open-source projects demonstrates the value of
			the presented approach. The results show that there is a statistically
			significant (<i>t</i>(23) = -12.28, <i>p</i> &lt; 0.0005, effect
					size <i>d</i> = 3.43) difference in the number of mutants generated
			per second between MuJava (<i>M</i> = 4.15, SD = 1.42) and <span
			class='snippet'>Judy</span> (<i>M</i> = 52.05, SD = 19.69). Apart
			from being statistically significant, this effect is considered very
			large and, therefore, represents a substantive finding. This therefore
			allows us to estimate the fault detection effectiveness of test suites
			of much larger systems.},
	doi = {10.1049/iet-sen.2008.0038},
}
