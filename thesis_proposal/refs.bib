% This file was created with JabRef 2.6.
% Encoding: Cp1250

@ARTICLE{Madeyski2010,
  author = {Madeyski, L. and Radyk, N.},
  title = {{Judy - A Mutation Testing Tool for Java}},
  journal = {IET Software},
  year = {2010},
  volume = {4},
  pages = {32--42},
  number = {1},
  abstract = {Popular code coverage measures, such as branch coverage, are indicators
	of the thoroughness rather than the fault detection capability of
	test suites. Mutation testing is a fault-based technique that measures
	the effectiveness of test suites for fault localisation. Unfortunately,
	use of mutation testing in the software industry is rare because
	generating and running vast numbers of mutants against the test cases
	is time-consuming and difficult to do without an automated, fast
	and reliable tool. Our objective is to present an innovative approach
	to mutation testing that takes advantage of a novel aspect-oriented
	programming mechanism, called `pointcut and advice`, to avoid multiple
	compilation of mutants and, therefore, to speed up mutation testing.
	An empirical comparison of the performance of the developed tool,
	called <span class='snippet'>Judy</span>, with the MuJava mutation
	testing tool on 24 open-source projects demonstrates the value of
	the presented approach. The results show that there is a statistically
	significant (<i>t</i>(23) = -12.28, <i>p</i> &lt; 0.0005, effect
	size <i>d</i> = 3.43) difference in the number of mutants generated
	per second between MuJava (<i>M</i> = 4.15, SD = 1.42) and <span
	class='snippet'>Judy</span> (<i>M</i> = 52.05, SD = 19.69). Apart
	from being statistically significant, this effect is considered very
	large and, therefore, represents a substantive finding. This therefore
	allows us to estimate the fault detection effectiveness of test suites
	of much larger systems.},
  doi = {10.1049/iet-sen.2008.0038},
}
